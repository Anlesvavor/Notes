{"version":3,"sources":["components/topbar/TopBar.js","components/sidebar/SideBarItem.js","components/sidebar/SideBar.js","components/workarea/WorkArea.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","props","className","onClick","toggleSideBar","SideBarItem","selectNote","bind","note","id","title","clasName","text","SideBar","items","notes","map","key","WorkArea","useState","setNote","useEffect","handleChange","e","target","name","value","save","onChange","App","data","selectedNote","setSelectedNote","setNotes","document","getElementById","classList","toggle","filter","newNote","console","log","sort","a","b","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAmBeA,G,MAdA,SAAAC,GACb,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,QAAQC,QAASF,EAAMG,eAAe,uBAAGF,UAAU,kBAAb,mBACrD,yBAAKA,UAAU,UAAf,aACA,yBAAKA,UAAU,SAAQ,uBAAGA,UAAU,kBAAb,iBCSdG,G,MAdK,SAAAJ,GAClB,OACE,yBAAKC,UAAU,oBAAoBC,QAASF,EAAMK,WAAWC,U,EAAWN,EAAMO,KAAKC,KACjF,yBAAKP,UAAU,OAAM,wBAAIA,UAAU,iBAAiBD,EAAMO,KAAKE,QAC/D,yBAAKR,UAAU,OAAM,0BAAMS,SAAS,gCAAgCV,EAAMO,KAAKI,UCctEC,G,MAhBC,SAAAZ,GACd,IAAMa,EACGb,EAAMc,MAAMC,KAAI,SAAAR,GAAI,OACxB,kBAAC,EAAD,CAAaS,IAAKT,EAAKC,GAAID,KAAMA,EAAMF,WAAYL,EAAMK,gBAE9D,OACE,yBAAKG,GAAG,YACLK,K,cCsBQI,G,MA/BE,SAAAjB,GAAU,IAAD,EACAkB,mBAASlB,EAAMO,MADf,mBACjBA,EADiB,KACXY,EADW,KAExBC,qBAAU,WACRD,EAAQnB,EAAMO,QACd,CAACP,EAAMO,OACT,IAAMc,EAAe,SAAAC,GACnBH,EAAQ,eAAIZ,EAAL,eAAYe,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAE9C,OACE,yBAAKjB,GAAG,aACN,yBAAKP,UAAU,yBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,4BAAQC,QAASF,EAAM0B,KAAKpB,U,EAAWC,IAAvC,SAEF,yBAAKN,UAAU,UACb,8BAAUO,GAAG,QAAQgB,KAAK,QAAQC,MAAOlB,EAAKE,MAAOkB,SAAUN,IAC/D,8BAAUb,GAAG,QAAQgB,KAAK,OAAOC,MAAOlB,EAAKI,KAAMgB,SAAUN,KAE/D,yBAAKpB,UAAU,e,MCiBV2B,MAjCf,WAEE,IAAMC,EAAO,CACX,CAACrB,GAAI,EAAGC,MAAO,QAASE,KAAM,QAC9B,CAACH,GAAI,EAAGC,MAAO,QAASE,KAAM,QAC9B,CAACH,GAAI,EAAGC,MAAO,QAASE,KAAM,SALnB,EAO2BO,mBAASW,EAAK,IAPzC,mBAONC,EAPM,KAOQC,EAPR,OAQab,mBAASW,GARtB,mBAQNf,EARM,KAQCkB,EARD,KAsBb,OACE,yBAAK/B,UAAU,mCACX,kBAAC,EAAD,CAAQE,cAdQ,WACpB8B,SAASC,eAAe,YAAYC,UAAUC,OAAO,aAcnD,yBAAKnC,UAAU,WACb,kBAAC,EAAD,CAASa,MAAOA,EAAOT,WAbV,SAAAG,GACjBuB,EAAgBjB,EAAMuB,QAAO,SAAA9B,GAAI,OAAIA,EAAKC,KAAOA,KAAI,OAajD,kBAAC,EAAD,CAAUD,KAAMuB,EAAcJ,KAXvB,SAAAY,GACXC,QAAQC,IAAI1B,GACZkB,EAAS,sBAAIlB,EAAMuB,QAAO,SAAA9B,GAAI,OAAEA,EAAKC,KAAO8B,EAAQ9B,OAA3C,CAAgD8B,IAASG,MAAK,SAACC,EAAGC,GAAJ,OAASD,EAAElC,GAAKmC,EAAEnC,OACzF+B,QAAQC,IAAI1B,SCfI8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASC,eAAe,SD6H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.73f44d46.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport './TopBar.css';\n\nconst TopBar = props => {\n  return (\n    <div className=\"top-bar row\">\n      <div className=\"col-1\" onClick={props.toggleSideBar}><i className=\"material-icons\">vertical_split</i></div>\n      <div className=\"col-10\">Notes app</div>\n      <div className=\"col-1\"><i className=\"material-icons\">more_vert</i></div>\n    </div>\n  )\n}\n\nTopBar.propTypes = {\n\n}\n\nexport default TopBar;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './SideBarItem.css'\n\nconst SideBarItem = props => {\n  return (\n    <div className=\"p-4 side-bar-item\" onClick={props.selectNote.bind(this, props.note.id)}>\n      <div className=\"p-2\"><h4 className=\"text-truncate\">{props.note.title}</h4></div>\n      <div className=\"p-2\"><span clasName=\"d-inline-block text-truncate\">{props.note.text}</span></div>\n    </div>\n  )\n}\n\nSideBarItem.propTypes = {\n  title: PropTypes.string,\n  text: PropTypes.string\n}\n\nexport default SideBarItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport SideBarItem from './SideBarItem'\n\nimport './SideBar.css'\n\nconst SideBar = props => {\n  const items = (() => {\n    return props.notes.map(note =>\n      (<SideBarItem key={note.id} note={note} selectNote={props.selectNote} />));\n  })();\n  return (\n    <div id=\"side-bar\">\n      {items}\n    </div>\n  )\n}\n\nSideBar.propTypes = {\n\n}\n\nexport default SideBar\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport './WorkArea.css'\n\nconst WorkArea = props => {\n  const [note, setNote] = useState(props.note);\n  useEffect(()=>{\n    setNote(props.note);\n  },[props.note]);\n  const handleChange = e => {\n    setNote({...note, [e.target.name]: e.target.value});\n  }\n  return (\n    <div id=\"work-area\">\n      <div className=\"container-fluid h-100\">\n        <div className=\"row h-100\">\n          <div className=\"col-1\">\n            <button onClick={props.save.bind(this, note)}>Save</button>\n          </div>\n          <div className=\"col-10\">\n            <textarea id=\"title\" name=\"title\" value={note.title} onChange={handleChange}></textarea>\n            <textarea id=\"sheet\" name=\"text\" value={note.text} onChange={handleChange}></textarea>\n          </div>\n          <div className=\"col-1\">\n        </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nWorkArea.propTypes = {\n\n}\n\nexport default WorkArea\n","import React, { useState } from 'react';\n\nimport TopBar from './components/topbar/TopBar';\nimport SideBar from './components/sidebar/SideBar';\nimport WorkArea from './components/workarea/WorkArea';\n\nimport './App.css';\n\nfunction App() {\n\n  const data = [\n    {id: 1, title: \"Note1\", text: \"tex1\"},\n    {id: 2, title: \"Note2\", text: \"tex2\"},\n    {id: 3, title: \"Note3\", text: \"tex3\"}\n  ];\n  const [selectedNote, setSelectedNote] = useState(data[0]);\n  const [notes, setNotes] = useState(data);\n\n  const toggleSideBar = () => {\n    document.getElementById('side-bar').classList.toggle(\"active\");\n  };\n  const selectNote = id => {\n    setSelectedNote(notes.filter(note => note.id === id)[0]);\n  }\n  const save = newNote => {\n    console.log(notes);\n    setNotes([...notes.filter(note=>note.id !== newNote.id), newNote].sort((a, b)=> a.id - b.id));\n    console.log(notes);\n  }\n\n  return (\n    <div className=\"App container-fluid h-100 w-100\">\n        <TopBar toggleSideBar={toggleSideBar}/>\n      <div className=\"wrapper\">\n        <SideBar notes={notes} selectNote={selectNote}/>\n        <WorkArea note={selectedNote} save={save}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}